{"version":3,"sources":["Converter/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","state","input","rgb","updateInput","e","hexValue","target","value","rgbValue","hexToRGB","setState","trim","length","indexOf","hex","parseInt","slice","className","style","backgroundColor","this","textAlign","type","placeholder","onChange","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEqBA,E,4MACnBC,MAAQ,CACNC,MAAO,GACPC,IAAK,sB,EAWPC,YAAc,SAACC,GACb,IAAMC,EAAWD,EAAEE,OAAOC,MACpBC,EAAW,EAAKC,SAASL,EAAEE,OAAOC,OAExC,EAAKG,SAAS,CACZT,MAAOI,EAASM,OAChBT,IAAK,KAGiB,IAApBG,EAASO,QACmB,GAA1BP,EAASQ,QAAQ,MAA0B,IAAZL,EACjC,EAAKE,SAAS,CACZT,MAAO,GACPC,IAAKM,IAGP,EAAKE,SAAS,CACZT,MAAOI,EAASM,OAChBT,IAAK,WAGAG,EAASO,OAAS,GAC3B,EAAKF,SAAS,CACZT,MAAOI,EAASM,OAChBT,IAAK,Y,8CAhCX,SAASY,GAKP,MAAO,OAJCC,SAASD,EAAIE,MAAM,EAAG,GAAI,IAId,KAHdD,SAASD,EAAIE,MAAM,EAAG,GAAI,IAGD,KAFzBD,SAASD,EAAIE,MAAM,EAAG,GAAI,IAEU,M,oBAgC5C,WACE,OACE,qBAAKC,UAAU,MAAMC,MAAO,CAAEC,gBAAiBC,KAAKpB,MAAME,KAA1D,SACE,sBACEe,UAAU,OACVC,MAAO,CAAEC,gBAAiBC,KAAKpB,MAAME,IAAKmB,UAAW,UAFvD,UAIE,qBAAKJ,UAAU,SAAf,kCACA,qBAAKA,UAAU,WAAf,SACE,uBACEA,UAAU,QACVK,KAAK,OACLC,YAAY,kCACZC,SAAUJ,KAAKjB,YACfI,MAAOa,KAAKpB,MAAMC,UAGtB,qBAAKgB,UAAU,SAAf,SAAyBG,KAAKpB,MAAME,e,GA5DZuB,IAAMC,W,MCSzBC,MARf,WACE,OACE,8BACA,cAAC,EAAD,OCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.608dff2e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Form extends React.Component {\r\n  state = {\r\n    input: \"\",\r\n    rgb: \"rgb(255, 243, 212)\",\r\n  };\r\n\r\n  hexToRGB(hex) {\r\n    var r = parseInt(hex.slice(1, 3), 16),\r\n      g = parseInt(hex.slice(3, 5), 16),\r\n      b = parseInt(hex.slice(5, 7), 16);\r\n\r\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\r\n  }\r\n\r\n  updateInput = (e) => {\r\n    const hexValue = e.target.value;\r\n    const rgbValue = this.hexToRGB(e.target.value);\r\n\r\n    this.setState({\r\n      input: hexValue.trim(),\r\n      rgb: \"\",\r\n    });\r\n\r\n    if (hexValue.length === 7) {\r\n      if (hexValue.indexOf(\"#\") != -1 && rgbValue != \"\") {\r\n        this.setState({\r\n          input: \"\",\r\n          rgb: rgbValue,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          input: hexValue.trim(),\r\n          rgb: \"ERROR!\",\r\n        });\r\n      }\r\n    } else if (hexValue.length > 7) {\r\n      this.setState({\r\n        input: hexValue.trim(),\r\n        rgb: \"ERROR!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\" style={{ backgroundColor: this.state.rgb }}>\r\n        <div\r\n          className=\"form\"\r\n          style={{ backgroundColor: this.state.rgb, textAlign: \"center\" }}\r\n        >\r\n          <div className=\"rgbBox\">Converter HEX to RGB</div>\r\n          <div className=\"inputbox\">\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder=\"Hexacolor with a # e.g. #ff00ff\"\r\n              onChange={this.updateInput}\r\n              value={this.state.input}\r\n            ></input>\r\n          </div>\r\n          <div className=\"rgbBox\">{this.state.rgb}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Form from './Converter'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n    <Form />\n  </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}